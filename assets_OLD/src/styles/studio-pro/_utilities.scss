// Breakpoints.
$breakpoints: (
        xs: 512px,
        sm: 768px,
        md: 896px,
        lg: 1152px,
        xl: 1280px
);

// Columns.
$margin: 2.564102564102564%;
$one-half: 48.71794871794871%;
$one-third: 31.62393162393162%;
$one-fifth: 17.94871794871794%;
$one-fourth: 23.07692307692307%;
$one-sixth: 14.52991452991453%;
$one-seventh: 12.08791208791208%;
$one-eighth: 10.25641025641025%;
$one-ninth: 8.831908831908832%;
$two-thirds: 65.81196581196582%;
$two-fourths: 48.71794871794871%;
$two-fifths: 38.46153846153846%;
$two-sixths: 31.62393162393162%;
$three-fourths: 74.35897435897436%;
$three-fifths: 58.97435897435897%;
$three-sixths: 48.71794871794871%;
$four-fifths: 79.48717948717948%;
$four-sixths: 65.81196581196582%;
$five-sixths: 82.90598290598291%;

// Media Queries.
@mixin breakpoint( $breakpoint ) {

  @if map-has-key($breakpoints, $breakpoint) {

    @media (min-width: #{ map-get($breakpoints, $breakpoint) }) {

      @content;
    }

  } @else if type_of( $breakpoint ) == number and unit( $breakpoint ) == px or unit( $breakpoint ) == em or unit( $breakpoint ) == rem {

    @media (min-width: $breakpoint) {

      @content;
    }

  } @else {

    @warn "No value could be retrieved from `#{$breakpoint}`. "
			+ "Please make sure it is defined in `$breakpoints` map, or it is a valid number with supported unit of px, em or rem.";
  }
}

/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
          to top          : bottom,
          to top right    : bottom left,
          to right top    : left bottom,
          to right        : left,
          to bottom right : top left,
          to right bottom : left top,
          to bottom       : top,
          to bottom left  : top right,
          to left bottom  : right top,
          to left         : right,
          to left top     : right bottom,
          to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}


// https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html
//
// grayscale      ex: filter: grayscale(100%);
// sepia          ex: filter: sepia(100%);
// saturate       ex: filter: saturate(0%);
// hue-rotate     ex: filter: hue-rotate(45deg);
// invert         ex: filter: invert(100%);
// brightness     ex: filter: brightness(15%);
// contrast       ex: filter: contrast(200%);
// blur           ex: filter: blur(2px);

@mixin filter($filter-type,$filter-amount, $content:null) {
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})') $content;
  -moz-filter: $filter-type+unquote('(#{$filter-amount})') $content;
  -ms-filter: $filter-type+unquote('(#{$filter-amount})') $content;
  -o-filter: $filter-type+unquote('(#{$filter-amount})') $content;
  filter: $filter-type+unquote('(#{$filter-amount})') $content;
}